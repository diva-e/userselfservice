#!/bin/bash

# Arguments
# 1: Username of user with changed password
# 2: MySQL hash of changed password
# 3: Sha256 hash of changed password
# 4: Sha512 hash of changed password
# 5: timestamp of password changed


# Variable-Setup (uc: user-to-change)
uc_username=$1
uc_pwMysql=$2
uc_pwSha256=$3
uc_pwSha512=$4
uc_timestamp=$5

base_path=${PUS_PATH};

# variables for git
git_user=${LDAP_SELFSERVICE_USER%@FIXME.com};
git_password=${LDAP_SELFSERVICE_PASSWORD};
git_working_dir=${base_path}/hiera-autogenerated
git_remote_repo=gitlab.FIXME.com/FIXME/hiera-autogenerated.git
git_branch=${TARGET_BRANCH}

# direcotry in which the yaml files are located
yaml_file_dir=${git_working_dir}/ldap

# try to get lock, exit after 20 seconds
printf "\n\n\n\npassword change started, trying to get the lock...\n";

cd $base_path;

# wait maximum 20 seconds for the lock
( flock -x -w 20 200 || exit 1
  # Clone repo if it has not been cloned yes (first time)
  if [ ! -d "${git_working_dir}/.git" ]; then
    printf "Git-Repo not created yet, cloning...\n"
    git clone --branch $git_branch https://$git_user:$git_password@$git_remote_repo

    # set config for push!
    cd $git_working_dir
    git config user.name "${git_user}"
    git config user.email "${git_user}@FIXME.com"
    git config push.default matching
  else
    # repo already exists, fetch and reset it...
    printf "Git-Repo already created, updating...\n"

    cd $git_working_dir
    git checkout -B $git_branch
    git fetch --all
    git reset --hard origin/$git_branch
  fi

  # switch to test branch
  cd $git_working_dir
  git checkout -B $git_branch

  # Update passwords.yaml file with perl script
  cd $base_path
  perl passwordChangeYaml.pl $uc_username $uc_pwMysql $uc_pwSha256 $uc_pwSha512 $uc_timestamp ${yaml_file_dir}/passwords.yaml

  # add and commit changed files
  cd $git_working_dir
  git add .
  git commit -m "Update password.yaml due to password change of ${uc_username}"
  git push origin $git_branch

  # change owner of all files to www-data -> so that apache can change the files too (when a users changes it's password)
  if [ "$(whoami)" == "root" ]; then
    printf "set www-data as owner of all files...\n";
    cd $base_path;
    find ! -name ".htaccess" ! -name ".htpasswd" -exec chown www-data:www-data {} \;
  fi

  printf "password change finished\n";
) 200>file.lock || printf "Did not get lock within 20 seconds\n"
